generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"] // Allows use of Neon serverless driver
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String         @id @default(uuid())
  name             String?        @map("name")
  email            String?        @unique
  username         String         @unique
  password         String?
  image            String?
  emailVerified    DateTime?      @map("email_verified")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  accounts         Account[]
  contacts         User[]         @relation("contacts")
  contactsRelation User[]         @relation("contacts")
  conversations    Conversation[]
  conversationIds  Int[]          @map("conversation_ids")
  seenMessages     Message[]      @relation("MessagesSeenByUser")
  messages         Message[]

  @@map("users")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @map("created_at")
  lastMessageAt DateTime  @default(now()) @map("last_message_at")
  name          String?
  isGroup       Boolean?  @map("is_group")
  messages      Message[]
  users         User[]
  userIds       String[]  @map("user_ids")
}

model Message {
  id             Int          @id @default(autoincrement())
  body           String?
  image          String?
  createdAt      DateTime     @default(now()) @map("created_at")
  seen           User[]       @relation("MessagesSeenByUser")
  conversationId Int          @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  senderId       String       @map("sender_id")
  sender         User         @relation(fields: [senderId], references: [id])
}
